AWSTemplateFormatVersion: '2010-09-09'
Description: 'Deploy HuggingFace TEI Embedding Model - Simple Version'

Parameters:
  ModelName:
    Type: String
    Default: 'huggingface-tei-embedding-model'
    Description: 'Name for the SageMaker model'

  EndpointName:
    Type: String
    Default: 'embedding-endpoint'
    Description: 'Name for the SageMaker endpoint'

  InstanceType:
    Type: String
    Default: 'ml.g5.xlarge'
    Description: 'Instance type for the endpoint'

  HuggingFaceModelId:
    Type: String
    Default: 'BAAI/bge-large-en-v1.5'
    Description: 'Hugging Face model ID from the Hub'

Resources:
  # IAM Role for SageMaker Model Execution
  SageMakerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-SageMakerRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: sagemaker.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess
      Policies:
        - PolicyName: ECRAndS3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:GetAuthorizationToken
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource: '*'
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  # SageMaker Model using TEI Container
  SageMakerModel:
    Type: AWS::SageMaker::Model
    Properties:
      ModelName: !Ref ModelName
      ExecutionRoleArn: !GetAtt SageMakerExecutionRole.Arn
      PrimaryContainer:
        # Using the correct TEI image URI from your script
        Image: '141502667606.dkr.ecr.eu-west-1.amazonaws.com/tei:2.0.1-tei1.2.3-gpu-py310-cu122-ubuntu22.04'
        Environment:
          # TEI-specific environment variables (conservative settings)
          HF_MODEL_ID: !Ref HuggingFaceModelId
          MAX_CONCURRENT_REQUESTS: '128'
          MAX_BATCH_TOKENS: '4096'
          MAX_BATCH_REQUESTS: '8'
          MAX_CLIENT_BATCH_SIZE: '8'
          POOLING: 'mean'
          NORMALIZE: 'true'
          TRUNCATE: 'END'
          DTYPE: 'float16'
          AUTO_TRUNCATE: 'true'
          HF_HUB_ENABLE_HF_TRANSFER: '1'
          SAGEMAKER_CONTAINER_LOG_LEVEL: '20'
          SAGEMAKER_REGION: !Ref AWS::Region
      Tags:
        - Key: Environment
          Value: !Ref AWS::StackName
        - Key: Container
          Value: 'HuggingFace-TEI'

  # SageMaker Endpoint Configuration
  EndpointConfiguration:
    Type: AWS::SageMaker::EndpointConfig
    Properties:
      EndpointConfigName: !Sub '${EndpointName}-config'
      ProductionVariants:
        - ModelName: !GetAtt SageMakerModel.ModelName
          VariantName: 'primary'
          InitialInstanceCount: 1
          InstanceType: !Ref InstanceType
          InitialVariantWeight: 1
          # TEI needs longer startup time
          ContainerStartupHealthCheckTimeoutInSeconds: 1200
          ModelDataDownloadTimeoutInSeconds: 1200
      Tags:
        - Key: Environment
          Value: !Ref AWS::StackName

  # SageMaker Endpoint
  SageMakerEndpoint:
    Type: AWS::SageMaker::Endpoint
    Properties:
      EndpointName: !Ref EndpointName
      EndpointConfigName: !GetAtt EndpointConfiguration.EndpointConfigName
      Tags:
        - Key: Environment
          Value: !Ref AWS::StackName
        - Key: Purpose
          Value: 'TEI-Embedding-Endpoint'

  # IAM Policy for Lambda to invoke SageMaker endpoint
  LambdaSageMakerPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub '${AWS::StackName}-LambdaSageMakerPolicy'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - sagemaker:InvokeEndpoint
            Resource: !Sub 'arn:aws:sagemaker:${AWS::Region}:${AWS::AccountId}:endpoint/${EndpointName}'
      Roles:
        - !Ref LambdaExecutionRole

  # Lambda Execution Role (for your Amplify function)
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-LambdaExecutionRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*'

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-CodeBuildRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SageMakerInvoke
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sagemaker:InvokeEndpoint
                Resource: !Sub 'arn:aws:sagemaker:${AWS::Region}:${AWS::AccountId}:endpoint/${EndpointName}'


Outputs:
  EndpointName:
    Description: 'Name of the SageMaker endpoint'
    Value: !Ref SageMakerEndpoint
    Export:
      Name: !Sub '${AWS::StackName}-EndpointName'

  EndpointArn:
    Description: 'ARN of the SageMaker endpoint'
    Value: !Sub 'arn:aws:sagemaker:${AWS::Region}:${AWS::AccountId}:endpoint/${SageMakerEndpoint}'
    Export:
      Name: !Sub '${AWS::StackName}-EndpointArn'

  ContainerImage:
    Description: 'TEI Container image used'
    Value: '141502667606.dkr.ecr.eu-west-1.amazonaws.com/tei:2.0.1-tei1.2.3-gpu-py310-cu122-ubuntu22.04'
    Export:
      Name: !Sub '${AWS::StackName}-ContainerImage'

  RequestFormat:
    Description: 'TEI Request format'
    Value: 'POST {"inputs": ["text1", "text2"]} â†’ Returns embeddings directly'
    Export:
      Name: !Sub '${AWS::StackName}-RequestFormat'

  UsageInstructions:
    Description: 'How to use this endpoint'
    Value: 'Use TEIEmbeddingService class from the Python client code provided'
    Export:
      Name: !Sub '${AWS::StackName}-Usage'

  CodeBuildRoleArn:
    Description: 'CodeBuild role with SageMaker endpoint access'
    Value: !GetAtt CodeBuildServiceRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-CodeBuildRoleArn'